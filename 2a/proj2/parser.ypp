%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <iostream>
	#define YYDEBUG 1

	int yylex(void);
	void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/* WRITE ME: put all your token definitions here*/
/* WRITE ME: put all your type definitions here*/
/* WRITE ME: put all your precedence/associativity rules here*/

/*
NOTE:
digits in upper level
everything exept aritmetic operators will be not be left?

highest presidenve unary?
*/

%start ROOT

%token BOOL
%token ELSE
%token IF
%token INT
%token WHILE
%token VAR
%token FUNCTION
%token INTARRAY
%token RETURN

%token EQT
%token GT
%token GE
%token LT
%token LE
%token NE
%token AND
%token OR
%token NOT
%token PLUS
%token MINUS
%token MULT
%token DIVIDE

%token TRUE
%token FALSE
%token DECIMAL
%token HEX
%token OCTAL
%token BINARY

%token SEMICOLON
%token COMMA
%token ABS
%token SC
%token EC
%token RPAREN
%token LPAREN
%token BAI
%token EAI
%token EQ


%%

/* WRITE ME: This is the language from Project 1(Calculator). You need
			 to put the productions for the grammar for the
			 language for this project here*/

ROOT        : 
            ;

FUNCTION    : INT IDENTIFIER LPAREN PARM_LIST RPAREN SC BODY_FUNC EC
            ;

PARM_LIST   : TYPE IDENTIFIER PARM_LIST
            | COMMA TYPE IDENTIFIER PARM_LIST
            | /* nothing */
            ;

TYPE        : INT
            | INTARRAY
            | BOOL
            ;

BODY_FUNC	: VAR_DEC BODY_FUNC
            | FUNCTION BODY_FUNC
            | SATATEMENT BODY_FUNC
            | /* nothing */
            ;

VAR_DEC     : TYPE VAR_DEC SEMICOLON
            | IDENTIFIER
            | COMMA IDENTIFIER
            ;

ARRAY       : 

STATE       : 


EXPR        : 

%%

/*
List    : List RelExpr ';' { }
        | RelExpr ';'      { }
        ;

RelExpr : Expr '<' Expr
        | Expr '>' Expr
        | Expr '=' Expr
        | Expr
        ;

Expr    : Expr '*' Expr
        | Expr '+' Expr 
        | Expr '-' Expr
        | Expr '/' Expr
        | 'n'
        | '(' Expr ')'
        ;
*/


/*You shouldn't have to do anything past this*/

extern int yylineno;

void yyerror(const char *s) {
	fprintf(stderr, "%s at line %d\n", s, yylineno);
	exit(0);
}
